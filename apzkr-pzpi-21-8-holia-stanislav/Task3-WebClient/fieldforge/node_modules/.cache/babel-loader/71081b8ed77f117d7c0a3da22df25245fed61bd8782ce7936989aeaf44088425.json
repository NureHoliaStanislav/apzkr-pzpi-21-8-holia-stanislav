{"ast":null,"code":"import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\naxios.defaults.baseURL = 'http://localhost:8000';\nclass AuthService {\n  login(credentials) {\n    console.log(credentials);\n    return axios.post('/api/user/login', credentials).then(response => {\n      const token = response.data.user.token;\n      if (typeof token === 'string') {\n        localStorage.setItem('token', token);\n        return jwtDecode(token);\n      }\n      throw new Error('Token is not a string');\n    });\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  getCurrentUser() {\n    try {\n      const token = localStorage.getItem('token');\n      if (typeof token === 'string') {\n        return jwtDecode(token);\n      }\n      return null;\n    } catch (ex) {\n      return null;\n    }\n  }\n}\nconst authServiceInstance = new AuthService();\nexport default authServiceInstance;","map":{"version":3,"names":["axios","jwtDecode","defaults","baseURL","AuthService","login","credentials","console","log","post","then","response","token","data","user","localStorage","setItem","Error","logout","removeItem","getCurrentUser","getItem","ex","authServiceInstance"],"sources":["/home/stanislav/Desktop/NURE/works/3 курс/2 семестр/апз/apz-pzpi-21-8-holia-stanislav/Task4/apz-pzpi-21-8-holia-stanislav-task4/fieldforge/src/shared/AuthService.js"],"sourcesContent":["import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\naxios.defaults.baseURL = 'http://localhost:8000';\nclass AuthService {\n  login(credentials) {\n    console.log(credentials);\n    return axios\n      .post('/api/user/login', credentials)\n      .then(response => {\n        const token = response.data.user.token;\n        if (typeof token === 'string') {\n          localStorage.setItem('token', token);\n          return jwtDecode(token);\n        }\n        throw new Error('Token is not a string');\n      });\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  getCurrentUser() {\n    try {\n      const token = localStorage.getItem('token');\n      if (typeof token === 'string') {\n        return jwtDecode(token);\n      }\n      return null;\n    } catch (ex) {\n      return null;\n    }\n  }\n}\n\nconst authServiceInstance = new AuthService();\n\nexport default authServiceInstance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;AACtCD,KAAK,CAACE,QAAQ,CAACC,OAAO,GAAG,uBAAuB;AAChD,MAAMC,WAAW,CAAC;EAChBC,KAAKA,CAACC,WAAW,EAAE;IACjBC,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;IACxB,OAAON,KAAK,CACTS,IAAI,CAAC,iBAAiB,EAAEH,WAAW,CAAC,CACpCI,IAAI,CAACC,QAAQ,IAAI;MAChB,MAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAI,CAACC,IAAI,CAACF,KAAK;MACtC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC7BG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;QACpC,OAAOX,SAAS,CAACW,KAAK,CAAC;MACzB;MACA,MAAM,IAAIK,KAAK,CAAC,uBAAuB,CAAC;IAC1C,CAAC,CAAC;EACN;EAEAC,MAAMA,CAAA,EAAG;IACPH,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,cAAcA,CAAA,EAAG;IACf,IAAI;MACF,MAAMR,KAAK,GAAGG,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,OAAOT,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAOX,SAAS,CAACW,KAAK,CAAC;MACzB;MACA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOU,EAAE,EAAE;MACX,OAAO,IAAI;IACb;EACF;AACF;AAEA,MAAMC,mBAAmB,GAAG,IAAInB,WAAW,CAAC,CAAC;AAE7C,eAAemB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}