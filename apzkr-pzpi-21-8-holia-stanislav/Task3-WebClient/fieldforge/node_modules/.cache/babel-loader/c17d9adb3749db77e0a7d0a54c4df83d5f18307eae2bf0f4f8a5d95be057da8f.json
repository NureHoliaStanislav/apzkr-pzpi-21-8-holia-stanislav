{"ast":null,"code":"import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\naxios.defaults.baseURL = 'http://localhost:8000';\nclass AuthService {\n  async login(credentials) {\n    const response = await axios.post('/api/user/login', credentials);\n    const token = response.data.user.token;\n    if (typeof token === 'string') {\n      localStorage.setItem('token', token);\n      return jwtDecode(token);\n    }\n    throw new Error('Token is not a string');\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  async signup(userDetails) {\n    const response = await axios.post('/api/user/sign-up', userDetails);\n    const token = response.data.user.token;\n    if (typeof token === 'string') {\n      localStorage.setItem('token', token);\n      return jwtDecode(token);\n    }\n    throw new Error('Token is not a string');\n  }\n  async getCurrentUser() {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/user', {\n        headers: {\n          'Authorization': `Token ${token}`\n        }\n      });\n      const user = response.data.user;\n      return user;\n    } catch (ex) {\n      return null;\n    }\n  }\n}\nconst authServiceInstance = new AuthService();\nexport default authServiceInstance;","map":{"version":3,"names":["axios","jwtDecode","defaults","baseURL","AuthService","login","credentials","response","post","token","data","user","localStorage","setItem","Error","logout","removeItem","signup","userDetails","getCurrentUser","getItem","get","headers","ex","authServiceInstance"],"sources":["/home/stanislav/Desktop/NURE/works/3 курс/2 семестр/апз/apz-pzpi-21-8-holia-stanislav/Task4/apz-pzpi-21-8-holia-stanislav-task4/fieldforge/src/shared/AuthService.jsx"],"sourcesContent":["import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\naxios.defaults.baseURL = 'http://localhost:8000';\nclass AuthService {\n  async login(credentials) {\n  \n    const response = await axios\n      .post('/api/user/login', credentials);\n    const token = response.data.user.token;\n    if (typeof token === 'string') {\n      localStorage.setItem('token', token);\n      return jwtDecode(token);\n    }\n    throw new Error('Token is not a string');\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  async signup(userDetails) {\n    const response = await axios\n      .post('/api/user/sign-up', userDetails);\n    const token = response.data.user.token;\n    if (typeof token === 'string') {\n      localStorage.setItem('token', token);\n      return jwtDecode(token);\n    }\n    throw new Error('Token is not a string');\n  }\n\n  async getCurrentUser() {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios\n      .get('/api/user',{\n        headers: {\n          'Authorization': `Token ${token}`\n        }\n      });\n      const user = response.data.user;\n      return user;\n    } catch (ex) {\n      return null;\n    }\n  }\n}\n\nconst authServiceInstance = new AuthService();\n\nexport default authServiceInstance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;AACtCD,KAAK,CAACE,QAAQ,CAACC,OAAO,GAAG,uBAAuB;AAChD,MAAMC,WAAW,CAAC;EAChB,MAAMC,KAAKA,CAACC,WAAW,EAAE;IAEvB,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CACzBQ,IAAI,CAAC,iBAAiB,EAAEF,WAAW,CAAC;IACvC,MAAMG,KAAK,GAAGF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAACF,KAAK;IACtC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7BG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;MACpC,OAAOR,SAAS,CAACQ,KAAK,CAAC;IACzB;IACA,MAAM,IAAIK,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EAEAC,MAAMA,CAAA,EAAG;IACPH,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC;EAClC;EAEA,MAAMC,MAAMA,CAACC,WAAW,EAAE;IACxB,MAAMX,QAAQ,GAAG,MAAMP,KAAK,CACzBQ,IAAI,CAAC,mBAAmB,EAAEU,WAAW,CAAC;IACzC,MAAMT,KAAK,GAAGF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAACF,KAAK;IACtC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7BG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;MACpC,OAAOR,SAAS,CAACQ,KAAK,CAAC;IACzB;IACA,MAAM,IAAIK,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EAEA,MAAMK,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF,MAAMV,KAAK,GAAGG,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMb,QAAQ,GAAG,MAAMP,KAAK,CAC3BqB,GAAG,CAAC,WAAW,EAAC;QACfC,OAAO,EAAE;UACP,eAAe,EAAE,SAASb,KAAK;QACjC;MACF,CAAC,CAAC;MACF,MAAME,IAAI,GAAGJ,QAAQ,CAACG,IAAI,CAACC,IAAI;MAC/B,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOY,EAAE,EAAE;MACX,OAAO,IAAI;IACb;EACF;AACF;AAEA,MAAMC,mBAAmB,GAAG,IAAIpB,WAAW,CAAC,CAAC;AAE7C,eAAeoB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}